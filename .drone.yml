kind: pipeline
type: docker
name: default

steps:
  - name: backend
    image: mcr.microsoft.com/dotnet/sdk:6.0
    commands:
      - cd Server
      - dotnet publish -r linux-arm --self-contained

  - name: frontend
    image: node:16
    commands:
      - cd Client
      - npm install
      - npm run build

  - name: pack
    image: debian:11
    depends_on:
      - backend
      - frontend
    commands:
      - apt-get update && apt-get install -y --no-install-recommends git
      - mkdir -p /drone/src/build
      - cp -r Server/bin/Debug/net6.0/linux-arm/publish/* /drone/src/build
      - mkdir -p /drone/src/build/public
      - cp -r Client/public/* /drone/src/build/public
      - git config --global --add safe.directory /drone/*
      - git rev-parse HEAD > /drone/src/build/version.hash
      - tar -zcf build.tar.gz -C /drone/src/build .

  - name: verify
    image: debian:11
    depends_on:
      - pack
    environment:
      # ssh-keygen -t rsa
      DRONE_SSH_PRIVATE:
        from_secret: drone_ssh_private
      # ssh-keyscan -t rsa shoppi.d.chris-cartwright.com
      SHOPPI_HOST_KEY:
        from_secret: shoppi.d_host_key
      HOST: shoppi.d.chris-cartwright.com
    commands:
      - apt-get update && apt-get install -y --no-install-recommends openssh-client ca-certificates tree
      - eval $(ssh-agent -s)
      - mkdir ~/.ssh && chmod 700 ~/.ssh
      - echo "$DRONE_SSH_PRIVATE" | ssh-add -
      - echo "$SHOPPI_HOST_KEY" >> ~/.ssh/known_hosts

      - "! ssh shoppi@\"$HOST\" \"cat ShopPi/version.hash\" | diff /drone/src/build/version.hash -"
  
  - name: deploy
    image: debian:11
    depends_on:
      - verify
    commands:
      - tar -zcf build.tar.gz -C /drone/src/build .
      - scp build.tar.gz shoppi@"$HOST":~/ShopPi/build.tar.gz
      # The `if` is intentional: an error from `stop.sh` should still kill the build.
      # We do not want to error out if the script does not exist.
      - ssh shoppi@"$HOST" "if [ -x ShopPi/Scripts/stop.sh ]; then ShopPi/Scripts/stop.sh; fi"
      - ssh shoppi@"$HOST" "cd ShopPi && tar -zxf build.tar.gz"
      - ssh shoppi@"$HOST" "chmod u+x ShopPi/Scripts/*.sh && dos2unix -q ShopPi/Scripts/* && ShopPi/Scripts/start.sh"
